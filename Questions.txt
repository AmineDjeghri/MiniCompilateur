EN PLUS:
- a/5+6-8/A (quad)
- cond: a>b+5 (quad)
-affecter entier à reel
valR [+-]?(0|[1-9][0-9]*)"."[0-9]*[1-9] 


ALGORITHME a
VAR a:entier;c:chaine;
b:reel;
DEBUT
c<--5;

=====================================================
ALGORITHME algo
VAR entier a;entier c;chaine d;
reel a|b;
=====================================================
ALGORITHME algo
VAR entier entier;entier c;chaine d;
reel a|b;

ALGORITHME algo
VAR entier a;enti c;chaine d;

ALGORITHME algo
VAR entier a;entier c;chaine d;
Faire a<-2; SI (6.2>6)

/*dzadzada*/
//dadazdzadza
ALGORITHME algo
VAR entier a;entier c;chaine d;
reel a|b;
f[5]:entier;a:entier; b:reel;
//dazdazdazdzada
DEBUT 
/*dzadzadzada*/
Faire a<--2; SI (6.2>6)
Faire a<--2; SI (6.5<6.2)
Faire a<--2; SI (5.2>a)
Faire a<--2; SI (5<b)
Faire a<--2; SI (a!=d)
a<--3+5+7;
Pour a<--5 jusque 5 Faire a<--9;Faire a<--7; SI (a=5)
a<--5;
h<--7; Fait
FIN
/*dazdzada*/
//adzda

-----------------TEST-------------
afficher la ligne et collone (division /0)





partieInstruction: inst_aff partieInstruction    {printf("correct");}
					| inst_boucle partieInstruction
					| inst_cond  partieInstruction
					| inst_aff
					|inst_boucle
					|inst_cond
;					